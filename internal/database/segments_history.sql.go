// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: segments_history.sql

package database

import (
	"context"
	"time"
)

const getSegmentsHistoryByUserId = `-- name: GetSegmentsHistoryByUserId :many
SELECT user_id, segment_id, segment_name, action_type, action_date 
FROM users_in_segments_history
WHERE user_id = $1 AND action_date > $2 AND action_date < $3
`

type GetSegmentsHistoryByUserIdParams struct {
	UserID   int64
	FromDate time.Time
	ToDate   time.Time
}

func (q *Queries) GetSegmentsHistoryByUserId(ctx context.Context, arg GetSegmentsHistoryByUserIdParams) ([]UsersInSegmentsHistory, error) {
	rows, err := q.db.QueryContext(ctx, getSegmentsHistoryByUserId, arg.UserID, arg.FromDate, arg.ToDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersInSegmentsHistory
	for rows.Next() {
		var i UsersInSegmentsHistory
		if err := rows.Scan(
			&i.UserID,
			&i.SegmentID,
			&i.SegmentName,
			&i.ActionType,
			&i.ActionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
