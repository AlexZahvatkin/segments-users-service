// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package database

import (
	"context"

	"github.com/AlexZahvatkin/segments-users-service/internal/models"
)

const addUser = `-- name: AddUser :one
INSERT INTO users(name, created_at, updated_at) 
VALUES ($1, now(), now())
RETURNING id, created_at, updated_at, name
`

func (q *Queries) AddUser(ctx context.Context, name string) (models.User, error) {
	row := q.db.QueryRowContext(ctx, addUser, name)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsersId = `-- name: GetAllUsersId :many
SELECT id
FROM users
`

func (q *Queries) GetAllUsersId(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, name
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (models.User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
